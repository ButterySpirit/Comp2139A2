@model Assign1.Models.Booking

@{
    ViewData["Title"] = "Create Hotel Booking";
    // Attempt to cast ViewBag.CostPerNight to decimal? for null-check and safe usage
    decimal? costPerNight = ViewBag.CostPerNight as decimal?;
    int numberOfNights = 1;
    decimal totalCost = costPerNight.HasValue ? costPerNight.Value * numberOfNights : 0m;
    int? hotelId = ViewBag.HotelId as int?;
}

<h2 class="display-2 text-center" id="createTitle">Create Booking</h2>

<form id="bookingForm" asp-action="Create" class="border border-2 rounded rounded-2 p-4 m-2">
    <div asp-validation-summary="All" class="text-danger mb-3"></div>

    <!-- Hidden fields for ServiceType and ServiceID -->
    <input type="hidden" name="ServiceType" value="Hotel" />

    @if (hotelId.HasValue)
    {
        <input type="hidden" name="ServiceID" value="@hotelId.Value" />
    }

    <div class="form-group mb-3">
        <label class="form-label">Hotel ID:</label>
        <p class="form-control-static text-success">@((hotelId.HasValue) ? $"{hotelId.Value}" : "N/A")</p>
    </div>

    <div class="form-group mb-3">
        <label class="form-label">Cost Per Night:</label>
        <p class="form-control-static text-success">@((costPerNight.HasValue) ? $"${costPerNight.Value}" : "N/A")</p>
    </div>

    <div class="form-group mb-3">
        <label for="numberOfNights" class="form-label">Number of Nights:</label>
        <input type="number" id="numberOfNights" name="numberOfNights" value="@numberOfNights" class="form-control" />
    </div>

    <div class="form-group mb-3">
        <label for="totalCost" class="form-label">Total Cost:</label>
        <input asp-for="TotalCost" id="totalCost" class="form-control text-success" value="@totalCost" readonly />
    </div>

    <div class="form-group mb-3">
        <label asp-for="BookingDate" class="form-label">Booking Date:</label>
        <input asp-for="BookingDate" type="date" class="form-control" />
        <span asp-validation-for="BookingDate" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="PaymentStatus" class="form-label">Payment Status:</label>
        <select asp-for="PaymentStatus" class="form-select">
            <option value="Pending">Pending</option>
            <option value="Confirmed">Confirmed</option>
            <option value="Cancelled">Cancelled</option>
        </select>
        <span asp-validation-for="PaymentStatus" class="text-danger"></span>
    </div>

    <div class="form-group mb-3 d-flex justify-content-between">
        <button type="submit" class="btn btn-primary">Submit</button>
        <a asp-controller="Hotel" asp-action="Index" class="btn btn-secondary">Back to Hotels</a>
    </div>
</form>

<div id="confirmationMessage" style="display:none;"></div>


@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }


    <script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function() {
            var costPerNight = @costPerNight;

            var numberOfNightsField = document.getElementById("numberOfNights");
            var totalCostField = document.getElementById("totalCost");

            numberOfNightsField.addEventListener("input", function () {
                var numberOfNights = this.value;
                var totalCost = numberOfNights * costPerNight;
                totalCostField.value = totalCost.toFixed(2);
            });

            var bookingForm = document.getElementById('bookingForm');

            bookingForm.addEventListener('submit', function(e) {
            e.preventDefault();

            var formData = new FormData(bookingForm);
            var submitButton = bookingForm.querySelector('button[type="submit"]');
            var originalButtonText = submitButton.textContent;
            submitButton.textContent = 'Submitting...'; // Update button text during submission
            submitButton.disabled = true; // Disable button to prevent multiple submissions

            fetch(bookingForm.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text(); // Get HTML content
            })
            .then(html => {
                // Inject the HTML content into the confirmationMessage div
                var confirmationDiv = document.getElementById('confirmationMessage');
                confirmationDiv.innerHTML = html;
                confirmationDiv.style.display = 'block';

                // hide the booking form & title
                document.getElementById('bookingForm').style.display = 'none';
                document.getElementById('createTitle').style.display = 'none';

                fire();
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while submitting the form');
            })
            .finally(() => {
                submitButton.textContent = originalButtonText;
                submitButton.disabled = false;
            });
        });
    });
    </script>
}

@model Assign1.Models.Booking

@{
    ViewData["Title"] = "Create Booking";
    decimal? ticketCost = ViewBag.TotalCost as decimal?;
    decimal? totalCost = ticketCost.HasValue ? ticketCost : 0m;
    string status = ViewBag.Status;
    int? flightId = ViewBag.FlightId as int?;
}

<h2 class="display-2 text-center" id="createTitle">Create Flight Booking</h2>

@if (status == "Cancelled")
{
    <div class="alert alert-warning text-center" role="alert">
        <strong>Sorry, this flight has been @status.</strong>
    </div>

    <a asp-controller="Flight" asp-action="Index" class="btn btn-secondary">Back to Flights</a>
}
else if (status == "Full")
{
    <div class="alert alert-warning text-center" role="alert">
        <strong>Sorry, this flight is @status.</strong>
    </div>

    <a asp-controller="Flight" asp-action="Index" class="btn btn-secondary">Back to Flights</a>
}
else
{
    <form id="bookingForm" asp-action="CreateFlight" class="border border-2 rounded rounded-2 p-4 m-2">
        <div asp-validation-summary="All" class="text-danger mb-3"></div>

        <!-- Hidden fields for ServiceType and ServiceID -->
        <input type="hidden" name="ServiceType" value="Flight" />

        <input type="hidden" name="flightId" value="@ViewBag.FlightId" />

        <input type="hidden" asp-for="ServiceID" value="@ViewBag.FlightId" />


        <input asp-for="TotalCost" type="hidden" value="@totalCost" />

        <div class="form-group mb-3">
            <label class="form-label">Flight ID:</label>
            <p class="form-control-static text-success">@ViewBag.FlightId</p>
        </div>

        <div class="form-group mb-3">
            <label for="totalCost" class="form-label">Ticket Cost:</label>
            <input id="totalCost" class="form-control text-success" value="@totalCost" readonly />
            <span asp-validation-for="TotalCost" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="BookingDate" class="form-label">Booking Date:</label>
            <input asp-for="BookingDate" type="date" class="form-control" />
            <span asp-validation-for="BookingDate" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="PaymentStatus" class="form-label">Payment Status:</label>
            <select asp-for="PaymentStatus" class="form-select">
                <option value="Pending">Pending</option>
                <option value="Confirmed">Confirmed</option>
                <option value="Cancelled">Cancelled</option>
            </select>
            <span asp-validation-for="PaymentStatus" class="text-danger"></span>
        </div>

        <div class="form-group mb-3 d-flex justify-content-between">
            <button type="submit" class="btn btn-primary">Submit</button>
            <a asp-controller="Flight" asp-action="Index" class="btn btn-secondary">Back to Flights</a>
        </div>
    </form>
}

<div id="confirmationMessage" style="display:none;"></div>


@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }


    <script type="text/javascript">document.addEventListener("DOMContentLoaded", function () {
            var bookingForm = document.getElementById('bookingForm');

            bookingForm.addEventListener('submit', function (e) {
                e.preventDefault();

                var formData = new FormData(bookingForm);
                var submitButton = bookingForm.querySelector('button[type="submit"]');
                var originalButtonText = submitButton.textContent;
                submitButton.textContent = 'Submitting...'; // Update button text during submission
                submitButton.disabled = true; // Disable button to prevent multiple submissions

                fetch(bookingForm.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.text(); // Get HTML content
                    })
                    .then(html => {
                        // Inject the HTML content into the confirmationMessage div
                        var confirmationDiv = document.getElementById('confirmationMessage');
                        confirmationDiv.innerHTML = html;
                        confirmationDiv.style.display = 'block';

                        // hide the booking form & title
                        document.getElementById('bookingForm').style.display = 'none';
                        document.getElementById('createTitle').style.display = 'none';

                        fire();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while submitting the form');
                    })
                    .finally(() => {
                        submitButton.textContent = originalButtonText;
                        submitButton.disabled = false;
                    });
            });
        });</script>
}
